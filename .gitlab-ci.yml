# You can override the included template(s) by including variable overrides
# See https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#priority-of-environment-variables
image: docker:19.03.1
stages:
- test
- release
- review
- deploy
- e2e-tests
- security
variables:
  IMAGE_PREFIX: "$CI_REGISTRY_IMAGE"
  DOMAIN: developer.overheid.nl
  REVIEW_BASE_DOMAIN: nlx.reviews
  REVIEW_NAMESPACE: don-$CI_ENVIRONMENT_SLUG
".validate":
  image: golang:1.14.1
  before_script:
  - cd validate
Test validate:
  extends: ".validate"
  stage: test
  script:
  - go test ./... -coverprofile coverage.out
  - go tool cover -html=coverage.out -o coverage.html
  - go tool cover -func=coverage.out
  coverage: "/total:\\t+\\(statements\\)\\t+([\\d\\.]+?%)/"
  artifacts:
    expire_in: 1 month
    paths:
    - validate/coverage.html
Validate API definitions:
  extends: ".validate"
  stage: test
  script:
  - go run ./cmd/don-validate/main.go
Lint and test API:
  image: python:3.8
  stage: test
  services:
  - postgres:11.6-alpine
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    DB_HOST: postgres
    DB_USER: postgres
    DB_PASSWORD: postgres
    DB_NAME: postgres
    SECRET_KEY: somethingverysecret
  cache:
    paths:
    - "$CI_PROJECT_DIR/.cache/pip"
  before_script:
  - cd api/
  - pip3 install -r requirements-dev.txt
  script:
  - python3 -m prospector
  - python3 -m coverage run --source='.' manage.py test core
  - python3 -m coverage report && python -m coverage html
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    expire_in: 1 month
    paths:
    - api/htmlcov
Verify test schema:
  image: python:3.8
  stage: test
  services:
  - postgres:11.6-alpine
  variables:
    DB_HOST: postgres
    DB_USER: postgres
    DB_PASSWORD: postgres
    DB_NAME: postgres
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    TESTDATA: "../linkchecker/testdata"
  cache:
    paths:
    - "$CI_PROJECT_DIR/.cache/pip"
  before_script:
  - apt-get update
  - apt-get install -qy postgresql-client-11
  - cd api/
  - pip3 install -r requirements-dev.txt
  script:
  - python manage.py migrate
  - 'PGPASSWORD="$DB_PASSWORD" pg_dump -h "$DB_HOST" -U "$DB_USER" "$DB_NAME" --no-owner
    --schema-only --schema=public --table=core_\* | sed ''/-- Dumped by /d'' > current_testschema.sql

'
  - ls -l current_testschema.sql
  - |
    if ! diff -u $TESTDATA/testschema.sql current_testschema.sql
    then
      echo -e "\e[31mError: Non-matching test database schema! See docs/docs/developer.md#Data model changes on how to update it.\e[0m"
      exit 1
    fi
  artifacts:
    expire_in: 1 month
    when: always
    paths:
    - api/current_testschema.sql
".ui":
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - export UI_IMAGE=${IMAGE_PREFIX}/ui
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
  - docker:19.03.1-dind
Test and release UI:
  extends: ".ui"
  stage: release
  script:
  - |
    docker build \
    --tag $UI_IMAGE:$CI_COMMIT_SHORT_SHA \
    --tag $UI_IMAGE:$CI_COMMIT_REF_SLUG \
    -f ui/Dockerfile . && \
    docker push $UI_IMAGE:$CI_COMMIT_SHORT_SHA && \
    docker push $UI_IMAGE:$CI_COMMIT_REF_SLUG
  coverage: "/All\\sfiles.*?\\s+(\\d+.\\d+)/"
".api":
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - export API_IMAGE=${IMAGE_PREFIX}/api
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
  - docker:19.03.1-dind
Release API:
  extends: ".api"
  stage: release
  script:
  - |
    docker build \
    --tag $API_IMAGE:$CI_COMMIT_SHORT_SHA \
    --tag $API_IMAGE:$CI_COMMIT_REF_SLUG \
    -f api/Dockerfile . && \
    docker push $API_IMAGE:$CI_COMMIT_SHORT_SHA && \
    docker push $API_IMAGE:$CI_COMMIT_REF_SLUG
  coverage: "/total:\\t+\\(statements\\)\\t+([\\d\\.]+?%)/"
".linkchecker":
  before_script:
  - cd linkchecker
Test linkchecker:
  extends: ".linkchecker"
  image: golang:1.14.1
  stage: test
  services:
  - postgres:11.6-alpine
  variables:
    DB_HOST: postgres
    DB_USER: postgres
    DB_PASSWORD: postgres
    DB_NAME: postgres
    DB_TEST_NAME: postgres
    SECRET_KEY: somethingverysecret
  script:
  - go test ./... -coverprofile coverage.out
  - go tool cover -html=coverage.out -o coverage.html
  - go tool cover -func=coverage.out
  coverage: "/total:\\t+\\(statements\\)\\t+([\\d\\.]+?%)/"
  artifacts:
    expire_in: 1 month
    paths:
    - linkchecker/coverage.html
Release Linkchecker:
  extends: ".linkchecker"
  stage: release
  before_script:
  - cd linkchecker
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - export LINKCHECKER_IMAGE=${IMAGE_PREFIX}/linkchecker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
  - docker:19.03.1-dind
  script:
  - |
    docker build \
    --tag $LINKCHECKER_IMAGE:$CI_COMMIT_SHORT_SHA \
    --tag $LINKCHECKER_IMAGE:$CI_COMMIT_REF_SLUG \
    . && \
    docker push $LINKCHECKER_IMAGE:$CI_COMMIT_SHORT_SHA && \
    docker push $LINKCHECKER_IMAGE:$CI_COMMIT_REF_SLUG
".docs":
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - export DOCS_IMAGE=${IMAGE_PREFIX}/docs
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
  - docker:19.03.1-dind
Release Docs:
  extends: ".docs"
  stage: release
  script:
  - |
    docker build \
    --tag $DOCS_IMAGE:$CI_COMMIT_SHORT_SHA \
    --tag $DOCS_IMAGE:$CI_COMMIT_REF_SLUG \
    -f docs/Dockerfile . && \
    docker push $DOCS_IMAGE:$CI_COMMIT_SHORT_SHA && \
    docker push $DOCS_IMAGE:$CI_COMMIT_REF_SLUG
Deploy Review App:
  stage: review
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  script:
  - echo -e -n "https://don-$CI_ENVIRONMENT_SLUG.$REVIEW_BASE_DOMAIN" > ci_environment_url.txt
  - |
    kubectl create namespace $REVIEW_NAMESPACE || true
    helm upgrade --install $REVIEW_NAMESPACE ./helm/don \
    --namespace $REVIEW_NAMESPACE \
    --set "secretKey=$SECRET_KEY" \
    --set-string "gitlabProjectId=$GITLAB_PROJECT_ID" \
    --set "gitlabUrl=$GITLAB_URL" \
    --set "gitlabAccessToken=$GITLAB_ACCESS_TOKEN" \
    --set "apiTestBaseUrl=$API_TEST_BASE_URL" \
    --set "apiTestToken=$API_TEST_TOKEN" \
    --set "apiImage=$IMAGE_PREFIX/api:$CI_COMMIT_SHORT_SHA" \
    --set "uiImage=$IMAGE_PREFIX/ui:$CI_COMMIT_SHORT_SHA" \
    --set "docsImage=$IMAGE_PREFIX/docs:$CI_COMMIT_SHORT_SHA" \
    --set "dbTerminationPolicy=WipeOut" \
    --set "linkcheckerImage=$IMAGE_PREFIX/linkchecker:$CI_COMMIT_SHORT_SHA" \
    --set "domain=don-$CI_ENVIRONMENT_SLUG.$REVIEW_BASE_DOMAIN" \
    --set "loadTestData=true" \
    --set "linkcheckerEnabledDefault=false" \
    --set "testAdminPassword=$TEST_ADMIN_PASSWORD" \
    --set "replicas=1"
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://don-$CI_ENVIRONMENT_SLUG.$REVIEW_BASE_DOMAIN
    on_stop: Remove Review App
  tags:
  - cg
  - docker
  only:
  - branches@commonground/don/developer.overheid.nl
  except:
  - master
  artifacts:
    paths:
    - ci_environment_url.txt
Remove Review App:
  stage: review
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  variables:
    GIT_STRATEGY: none
  script:
  - helm uninstall $REVIEW_NAMESPACE --namespace $REVIEW_NAMESPACE
  - kubectl delete namespace $REVIEW_NAMESPACE
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://don-$CI_ENVIRONMENT_SLUG.$REVIEW_BASE_DOMAIN
    action: stop
  tags:
  - cg
  - docker
  only:
  - branches@commonground/don/developer.overheid.nl
  except:
  - master
E2E tests:
  stage: e2e-tests
  before_script:
  - export URL=$([ -f ci_environment_url.txt ] && cat ci_environment_url.txt || echo
    "https://$DOMAIN")
  - export E2E_IMAGE=${IMAGE_PREFIX}/e2e
  script:
  - |
    docker build --tag $E2E_IMAGE:$CI_COMMIT_SHORT_SHA \
    -f e2e-tests/Dockerfile . && \
    docker run --rm --cap-add=SYS_ADMIN \
    -e URL=${URL} \
    $E2E_IMAGE:$CI_COMMIT_SHORT_SHA \
    /bin/sh -c "./wait-for-http.sh $URL && npm test"
  only:
  - branches@commonground/don/developer.overheid.nl
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
  - docker:19.03.1-dind
Deploy production:
  stage: deploy
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  script:
  - |
    helm upgrade --install don-prod ./helm/don \
    --namespace don-prod \
    --set "secretKey=$SECRET_KEY" \
    --set-string "gitlabProjectId=$GITLAB_PROJECT_ID" \
    --set "gitlabUrl=$GITLAB_URL" \
    --set "gitlabAccessToken=$GITLAB_ACCESS_TOKEN" \
    --set "apiTestBaseUrl=$API_TEST_BASE_URL" \
    --set "apiTestToken=$API_TEST_TOKEN" \
    --set "apiImage=$IMAGE_PREFIX/api:$CI_COMMIT_SHORT_SHA" \
    --set "uiImage=$IMAGE_PREFIX/ui:$CI_COMMIT_SHORT_SHA" \
    --set "docsImage=$IMAGE_PREFIX/docs:$CI_COMMIT_SHORT_SHA" \
    --set "dbTerminationPolicy=DoNotTerminate" \
    --set "linkcheckerImage=$IMAGE_PREFIX/linkchecker:$CI_COMMIT_SHORT_SHA" \
    --set "linkcheckerEnabledDefault=true" \
    --set "domain=$DOMAIN"
  environment:
    name: prod
    url: https://$DOMAIN
  tags:
  - cg-privileged
  - docker
  only:
  - master@commonground/don/developer.overheid.nl

sast:
  stage: security
include:
- template: Security/SAST.gitlab-ci.yml
- template: Container-Scanning.gitlab-ci.yml
- template: Dependency-Scanning.gitlab-ci.yml
- template: SAST.gitlab-ci.yml
- template: Secret-Detection.gitlab-ci.yml


container_scanning:
  stage: security
  variables:
    IMAGE_REPOSITORY_BASE: registry.gitlab.com/commonground/don
    IMAGE_SUFFIXES: >
      developer.overheid.nl/ui
      developer.overheid.nl/docs
      developer.overheid.nl/api
      developer.overheid.nl/linkchecker
    REPORTS_DIRECTORY: /reports
  before_script:
    - yum install -y jq
    - export IMAGE_REGISTRY=$(cat ci_build_image_registry.txt)
    - export CI_APPLICATION_TAG=$(cat ci_build_image_tag.txt)
  script:
    - mkdir -p ${REPORTS_DIRECTORY}
    - |
        for IMAGE_SUFFIX in ${IMAGE_SUFFIXES}; do
          export CI_APPLICATION_REPOSITORY="${IMAGE_REGISTRY}/${IMAGE_REPOSITORY_BASE}/${IMAGE_SUFFIX}"
          export ANALYZER_ARTIFACT_DIR="${REPORTS_DIRECTORY}/${IMAGE_SUFFIX}"

          SECTION_NAME="section_${IMAGE_SUFFIX}"
          echo -e "start_section:$(date +%s):${SECTION_NAME}\r\e[0KScanning image: ${CI_APPLICATION_REPOSITORY}"

          mkdir -p ${ANALYZER_ARTIFACT_DIR}
          /analyzer run

          echo -e "section_end:$(date +%s):${SECTION_NAME}\r\e[0K"
        done
    # Merge the per-image reports in to one report
    - jq -s '.[0].version as $version | [.[] | to_entries] | flatten | reduce .[] as $dot ({}; .[$dot.key] += $dot.value) | .version = $version' /reports/*/gl-container-scanning-report.json > gl-container-scanning-report.json
#   dependencies:
#     - Build acceptance
#     - Build review
  rules:
    - if: $CONTAINER_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH &&
        $GITLAB_FEATURES =~ /\bcontainer_scanning\b/



dependency_scanning:
  stage: security

# Override the template from 'Secret-Detection.gitlab-ci.yml'
.secret-analyzer:
  stage: security

secret_detection:
  variables:
    SECRET_DETECTION_EXCLUDED_PATHS: "pki/,testing/"
